#!/usr/bin/env python
import os
import sys

env = SConscript("godot-cpp/SConstruct")

# For reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# tweak this if you want to use different folders, or more folders, to store your source code in.
# env.Append(CPPPATH=[
#     "src/",
#     "../julia_runtime/include/julia",  # or wherever you copied the headers
# ])

# env.Append(LIBPATH=[
#     "../julia_runtime/lib"  # This is where libjulia.dll is
# ])

# env.Append(LIBS=["julia"])
env.Append(LIBS=["user32"]) # for ErrorExit functionality

# print("Using include paths:", env["CPPPATH"])
# print("Using library paths:", env["LIBPATH"])

sources = Glob("src/*.cpp")

if env["platform"] == "macos":
    library = env.SharedLibrary(
        "godot/bin/libgdexample.{}.{}.framework/libgdexample.{}.{}".format(
            env["platform"], env["target"], env["platform"], env["target"]
        ),
        source=sources,
    )
elif env["platform"] == "ios":
    if env["ios_simulator"]:
        library = env.StaticLibrary(
            "godot/bin/libgdexample.{}.{}.simulator.a".format(env["platform"], env["target"]),
            source=sources,
        )
    else:
        library = env.StaticLibrary(
            "godot/bin/libgdexample.{}.{}.a".format(env["platform"], env["target"]),
            source=sources,
        )
else:
    env.Append(CCFLAGS=["/Zi", "/FS"])
    env.Append(LINKFLAGS=["/DEBUG"])
    
    library = env.SharedLibrary(
        "godot/bin/libgdexample{}{}".format(env["suffix"], env["SHLIBSUFFIX"]),
        source=sources,
    )

Default(library)
